// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nebula.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing a message ping.
type PingPongRequest struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingPongRequest) Reset()         { *m = PingPongRequest{} }
func (m *PingPongRequest) String() string { return proto.CompactTextString(m) }
func (*PingPongRequest) ProtoMessage()    {}
func (*PingPongRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d65afa7693df5ef, []int{0}
}

func (m *PingPongRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingPongRequest.Unmarshal(m, b)
}
func (m *PingPongRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingPongRequest.Marshal(b, m, deterministic)
}
func (m *PingPongRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingPongRequest.Merge(m, src)
}
func (m *PingPongRequest) XXX_Size() int {
	return xxx_messageInfo_PingPongRequest.Size(m)
}
func (m *PingPongRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingPongRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingPongRequest proto.InternalMessageInfo

func (m *PingPongRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// The response message containing a reply pong.
type PingPongReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingPongReply) Reset()         { *m = PingPongReply{} }
func (m *PingPongReply) String() string { return proto.CompactTextString(m) }
func (*PingPongReply) ProtoMessage()    {}
func (*PingPongReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d65afa7693df5ef, []int{1}
}

func (m *PingPongReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingPongReply.Unmarshal(m, b)
}
func (m *PingPongReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingPongReply.Marshal(b, m, deterministic)
}
func (m *PingPongReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingPongReply.Merge(m, src)
}
func (m *PingPongReply) XXX_Size() int {
	return xxx_messageInfo_PingPongReply.Size(m)
}
func (m *PingPongReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PingPongReply.DiscardUnknown(m)
}

var xxx_messageInfo_PingPongReply proto.InternalMessageInfo

func (m *PingPongReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*PingPongRequest)(nil), "proto.PingPongRequest")
	proto.RegisterType((*PingPongReply)(nil), "proto.PingPongReply")
}

func init() { proto.RegisterFile("nebula.proto", fileDescriptor_2d65afa7693df5ef) }

var fileDescriptor_2d65afa7693df5ef = []byte{
	// 126 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0x4b, 0x4d, 0x2a,
	0xcd, 0x49, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xda, 0x5c, 0xfc,
	0x01, 0x99, 0x79, 0xe9, 0x01, 0xf9, 0x79, 0xe9, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42,
	0x12, 0x5c, 0xec, 0xb9, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c,
	0x41, 0x30, 0xae, 0x92, 0x26, 0x17, 0x2f, 0x42, 0x71, 0x41, 0x4e, 0x25, 0x6e, 0xa5, 0x46, 0x2e,
	0x5c, 0x6c, 0x7e, 0x60, 0xeb, 0x84, 0xac, 0xb8, 0x38, 0x60, 0x9a, 0x84, 0xc4, 0x20, 0x96, 0xeb,
	0xa1, 0x59, 0x29, 0x25, 0x82, 0x21, 0x5e, 0x90, 0x53, 0xa9, 0xc4, 0x90, 0xc4, 0x06, 0x16, 0x36,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x32, 0xe7, 0xe2, 0x44, 0xbb, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NebulaClient is the client API for Nebula service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NebulaClient interface {
	// Sends Ping and receives Pong
	PingPong(ctx context.Context, in *PingPongRequest, opts ...grpc.CallOption) (*PingPongReply, error)
}

type nebulaClient struct {
	cc *grpc.ClientConn
}

func NewNebulaClient(cc *grpc.ClientConn) NebulaClient {
	return &nebulaClient{cc}
}

func (c *nebulaClient) PingPong(ctx context.Context, in *PingPongRequest, opts ...grpc.CallOption) (*PingPongReply, error) {
	out := new(PingPongReply)
	err := c.cc.Invoke(ctx, "/proto.Nebula/PingPong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NebulaServer is the server API for Nebula service.
type NebulaServer interface {
	// Sends Ping and receives Pong
	PingPong(context.Context, *PingPongRequest) (*PingPongReply, error)
}

// UnimplementedNebulaServer can be embedded to have forward compatible implementations.
type UnimplementedNebulaServer struct {
}

func (*UnimplementedNebulaServer) PingPong(ctx context.Context, req *PingPongRequest) (*PingPongReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingPong not implemented")
}

func RegisterNebulaServer(s *grpc.Server, srv NebulaServer) {
	s.RegisterService(&_Nebula_serviceDesc, srv)
}

func _Nebula_PingPong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingPongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NebulaServer).PingPong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Nebula/PingPong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NebulaServer).PingPong(ctx, req.(*PingPongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Nebula_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Nebula",
	HandlerType: (*NebulaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingPong",
			Handler:    _Nebula_PingPong_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nebula.proto",
}
